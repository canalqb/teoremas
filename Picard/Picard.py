# üß† - Teorema de Picard

[![Python](https://img.shields.io/badge/Python-3.8.10-blue.svg)](https://www.python.org/)
[![License](https://img.shields.io/badge/license-MIT-green)](LICENSE)
[![LGN](https://img.shields.io/badge/Teorema-Picard--Lindel√∂f-ff69b4.svg)](https://en.wikipedia.org/wiki/Picard%E2%80%93Lindel%C3%B6f_theorem)

## Frase do Teorema

> Se uma equa√ß√£o diferencial for bem comportada, ent√£o ela ter√° uma √∫nica solu√ß√£o poss√≠vel. ‚Äì Isso significa que, sob certas condi√ß√µes, conseguimos prever exatamente como a solu√ß√£o ir√° se comportar.

---

## Sum√°rio

* [1. Introdu√ß√£o ao Teorema](#1-introdu√ß√£o-ao-teorema)

  * [1.1 Resumo](#11-resumo)
  * [1.2 Exemplos Pr√°ticos](#12-exemplos-pr√°ticos)
  * [1.3 Explica√ß√£o Detalhada](#13-explica√ß√£o-detalhada)
  * [1.4 Aplica√ß√µes](#14-aplica√ß√µes)
  * [1.5 An√°lise da Tabela](#15-an√°lise-da-tabela)
* [2. Script `Picard.py`](#2-script-picardpy)

  * [2.1 Rela√ß√£o com o Teorema](#21-rela√ß√£o-com-o-teorema)
  * [2.2 Objetivo do Script](#22-objetivo-do-script)
  * [2.3 Exemplo de Sa√≠da](#23-exemplo-de-sa√≠da)
  * [2.4 Funcionamento Interno](#24-funcionamento-interno)
  * [2.5 Tecnologias e Requisitos](#25-tecnologias-e-requisitos)
* [3 Extras](#3-extras)

  * [3.1 Licen√ßa](#31-licen√ßa)
  * [3.2 Refer√™ncias](#32-referencias)
  * [3.3 Testes e Valida√ß√µes](#33-testes-e-valida√ß√µes)
* [4 Contato](#4-contato)
* [5. Nota](#5-nota)

---

## 1. Introdu√ß√£o ao Teorema

### 1.1 Resumo

O **teorema de Picard** (ou Picard-Lindel√∂f) garante que, quando uma equa√ß√£o diferencial simples est√° bem definida e segue regras previs√≠veis, ela tem **uma √∫nica solu√ß√£o**. Isso √© essencial em matem√°tica, f√≠sica e engenharia.

---

### 1.2 Exemplos Pr√°ticos

* Modelos de crescimento populacional.
* Previs√£o de temperatura em processos t√©rmicos.
* Movimento de um corpo em queda com resist√™ncia do ar.

---

### 1.3 Explica√ß√£o Detalhada

Esse teorema se aplica a equa√ß√µes do tipo:

```
dy/dx = f(x, y)  com condi√ß√£o inicial y(x0) = y0
```

Se a fun√ß√£o `f(x, y)` for cont√≠nua e n√£o crescer de forma descontrolada (tecnicamente: se satisfizer uma **condi√ß√£o de Lipschitz**), ent√£o a solu√ß√£o existe e √© √∫nica.

---

### 1.4 Aplica√ß√µes

* Resolver problemas de engenharia com seguran√ßa.
* Usar simula√ß√µes computacionais confi√°veis.
* Aplicar m√©todos num√©ricos como o de Euler ou Runge-Kutta com garantias de resultado.

---

### 1.5 An√°lise da Tabela

O script apresenta uma tabela de pot√™ncias de 2 e seus n√∫meros de **Mersenne** (2‚Åø - 1):

```
     n  2^n (In√≠cio)  Mersenne (Fim)  Dist√¢ncia
     0      1              0              1
     1      2              1              1
     2      4              3              1
     ...
    10   1024           1023              1
```

Todas as dist√¢ncias s√£o sempre 1, j√° que 2‚Åø - (2‚Åø - 1) = 1. Isso mostra um padr√£o interessante e fixo.

---

## 2. Script `Picard.py`

### 2.1 Rela√ß√£o com o Teorema

O script usa o **m√©todo de Picard**, uma forma num√©rica de resolver equa√ß√µes diferenciais simples, baseado na ideia do teorema.

---

### 2.2 Objetivo do Script

* Mostrar graficamente como o m√©todo de Picard aproxima a solu√ß√£o da equa√ß√£o diferencial.
* Ilustrar a rela√ß√£o entre pot√™ncias de 2 e seus n√∫meros de Mersenne por meio de curvas.

---

### 2.3 Exemplo de Sa√≠da

```
Tabela de dist√¢ncias entre pot√™ncias de 2 e seus Mersennes:

     n  2^n (In√≠cio)  Mersenne (Fim)  Dist√¢ncia
     0      1              0              1
     1      2              1              1
     ...
    10   1024           1023              1
```

Em seguida, um gr√°fico com curvas coloridas mostra as transi√ß√µes entre 2‚Åø e 2‚Åø - 1 com uma curvatura suave.

---

### 2.4 Funcionamento Interno

* Gera os valores de 2‚Åø para `n = 0 at√© 10`.
* Calcula os n√∫meros de Mersenne.
* Cria uma tabela com a dist√¢ncia entre eles.
* Plota curvas suaves (arcos) entre cada par (2‚Åø, 2‚Åø - 1).

---

### 2.5 Tecnologias e Requisitos

* **Python 3.8.10**
* Bibliotecas:

  * `numpy`
  * `matplotlib`
  * `pandas`

---

## 3 Extras

### 3.1 Licen√ßa

Este projeto est√° licenciado sob a licen√ßa **MIT**.

---

### 3.2 Refer√™ncias

* [Wikipedia - Picard‚ÄìLindel√∂f theorem](https://en.wikipedia.org/wiki/Picard%E2%80%93Lindel%C3%B6f_theorem)
* [Teoremas cl√°ssicos de EDOs](https://pt.wikipedia.org/wiki/Equa%C3%A7%C3%A3o_diferencial_ordin%C3%A1ria)

---

### 3.3 Testes e Valida√ß√µes

* Script testado no terminal Windows.
* Funcionando corretamente com Python 3.8.10.

---

## 4 Contato

* Feito por **CanalQb** no GitHub
* Visite o blog: canalqb.blogspot.com ‚Üí [https://canalqb.blogspot.com](https://canalqb.blogspot.com)
* üí∏ Apoie o projeto via Bitcoin: `13Ve1k5ivByaCQ5yer6GoV84wAtf3kNava`
* üìß PIX: [qrodrigob@gmail.com](mailto:qrodrigob@gmail.com)

*Readme.md corrigido por ChatGPT*

---

## 5. Nota

* **Teorema**: uma regra ou verdade matem√°tica que foi provada com l√≥gica e fatos.
* **Equa√ß√£o diferencial**: uma equa√ß√£o que descreve como algo muda (por exemplo, velocidade, temperatura, etc).
* **Lipschitz**: uma condi√ß√£o matem√°tica que garante que a fun√ß√£o n√£o muda bruscamente.
* **Mersenne**: um tipo especial de n√∫mero que √© sempre 1 a menos que uma pot√™ncia de 2.
* **M√©todo de Picard**: um jeito de resolver uma equa√ß√£o passo a passo, usando aproxima√ß√µes.
* **Script**: um pequeno programa feito para rodar uma tarefa espec√≠fica.
